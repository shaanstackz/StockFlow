import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd

# Initial inventory data
inventory_data = [
    {
        'name': 'Product A',
        'currentStock': 500,
        'reorderPoint': 200,
        'forecastedDemand': 350,
        'status': 'Normal'
    },
    {
        'name': 'Product B',
        'currentStock': 100,
        'reorderPoint': 250,
        'forecastedDemand': 300,
        'status': 'Low Stock'
    },
    {
        'name': 'Product C',
        'currentStock': 750,
        'reorderPoint': 300,
        'forecastedDemand': 400,
        'status': 'Normal'
    }
]

# Demand trend data
demand_trend = [
    {'month': 'Jan', 'demand': 2500},
    {'month': 'Feb', 'demand': 2800},
    {'month': 'Mar', 'demand': 3200},
    {'month': 'Apr', 'demand': 3500},
    {'month': 'May', 'demand': 3800}
]

# Convert to DataFrames
inventory_df = pd.DataFrame(inventory_data)
demand_df = pd.DataFrame(demand_trend)

# Initialize Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    html.H1('Automated Reordering Dashboard'),
    
    # Summary Cards
    html.Div([
        html.Div([
            html.Span('Total Products', className='text-sm'),
            html.Div(len(inventory_data), className='text-2xl font-bold')
        ], className='border rounded p-4'),
        
        html.Div([
            html.Span('Low Stock Alerts', className='text-sm'),
            html.Div(
                len(inventory_df[inventory_df['status'] == 'Low Stock']),
                className='text-2xl font-bold text-red-600'
            )
        ], className='border rounded p-4'),
        
        html.Div([
            html.Span('Forecasted Demand', className='text-sm'),
            html.Div(
                demand_trend[-1]['demand'], 
                className='text-2xl font-bold'
            )
        ], className='border rounded p-4'),
        
        html.Div([
            html.Span('System Status', className='text-sm'),
            html.Div('Operational', className='text-2xl font-bold text-green-600')
        ], className='border rounded p-4')
    ], className='grid grid-cols-4 gap-4 mb-6'),
    
    # Main Content
    html.Div([
        # Inventory Levels Table
        html.Div([
            html.H2('Inventory Levels', className='text-lg font-semibold mb-4'),
            dash_table.DataTable(
                id='inventory-table',
                columns=[
                    {'name': col, 'id': col} for col in inventory_df.columns
                ],
                data=inventory_df.to_dict('records'),
                style_cell={'textAlign': 'left'},
                style_header={'fontWeight': 'bold'},
                style_data_conditional=[
                    {
                        'if': {'filter_query': '{status} = "Low Stock"'},
                        'color': 'red'
                    }
                ]
            )
        ], className='border rounded p-4'),
        
        # Demand Forecast Chart
        html.Div([
            html.H2('Demand Forecast Trend', className='text-lg font-semibold mb-4'),
            dcc.Graph(
                figure=px.line(
                    demand_df, 
                    x='month', 
                    y='demand', 
                    title='Monthly Demand Forecast'
                )
            )
        ], className='border rounded p-4')
    ], className='grid grid-cols-2 gap-4')
], className='p-6')

if __name__ == '__main__':
    app.run_server(debug=True)
